proj_name = was

!ifdef bootstrap
name = bwas$(target_cpu)
!else
name = was$(target_cpu)
!endif

!ifndef was_autodepends
was_autodepends = .AUTODEPEND
!endif

stand_subdir = stand

.extensions: .rc .y .re .gh .msg

additional_cleanup = *.c *.h *.re *.y

additional_cleanup_subdir = $(stand_subdir)

!include cproj.mif
!include defrule.mif
!include deftarg.mif
!include osi.mif

!include $(owl_dir)/client.mif
!include $(cpp_dir)/client.mif
!ifdef test_inline_as
!include $(as_dir)/client.mif
!endif

!include wres.mif

# yacc
#########################
yacc_prefix     = asy
asi_yacc_prefix = asiy

yacc_flags      = -b $(yacc_prefix) -d -db -dd
asi_yacc_flags  = -b $(asi_yacc_prefix) -d -db -dd

yacc_src        = as.y
yacc_in         = as_in
asi_yacc_in     = asi_in
yacc_out        = $(yacc_prefix)tab
asi_yacc_out    = $(asi_yacc_prefix)tab

lex_flags       =
lex_src         = scan.re
lex_in          = scan_in
asi_lex_in      = scani_in
lex_out         = aslexyy
asi_lex_out     = asilexyy

# objects
##########
as_comm_objs_axp = $(_subdir_)alphafmt.obj $(_subdir_)alphains.obj
as_comm_objs_mps = $(_subdir_)mipsfmt.obj $(_subdir_)mipsins.obj
as_comm_objs_ppc = $(_subdir_)ppcfmt.obj $(_subdir_)ppcins.obj

as_comm_objs = &
    $(_subdir_)asexpr.obj &
    $(_subdir_)asopernd.obj &
    $(_subdir_)asmem.obj &
    $(_subdir_)asutils.obj &
    $(_subdir_)asregs.obj &
    $(_subdir_)assymbol.obj &
    $(_subdir_)asdrectv.obj &
    $(_subdir_)asdirop.obj &
    $(_subdir_)asnumlab.obj &
    $(_subdir_)ashash.obj &
    $(_subdir_)asmsg.obj

as_stand_objs = &
    $(stand_subdir)/$(yacc_out).obj &
    $(stand_subdir)/$(lex_out).obj &
    $(stand_subdir)/main.obj &
    $(stand_subdir)/obj.obj &
    $(stand_subdir)/sections.obj &
    $(stand_subdir)/options.obj &
    $(stand_subdir)/preproc.obj &
    $(stand_subdir)/ppexpr.obj &
    $(stand_subdir)/ppmacro.obj &
    $(stand_subdir)/ppmem.obj &
    $(stand_subdir)/ppenv.obj &
    $(stand_subdir)/pathlist.obj &
    $(stand_subdir)/trmemcvr.obj
!ifeq release 0
as_stand_objs += $(stand_subdir)/trmem.obj
!endif

as_inline_objs = &
    $(asi_yacc_out).obj &
    $(asi_lex_out).obj &
    asinline.obj &
    asiobj.obj

_subdir_ = $(stand_subdir)/
as_objs = $+$(as_comm_objs) $(as_comm_objs_$(target_cpu))$- $(as_stand_objs)
_subdir_ =
asi_objs = $+$(as_comm_objs) $(as_comm_objs_$(target_cpu))$- $(as_inline_objs)

asi_test_objs = asitest.obj trmemcvr.obj
!ifeq release 0
asi_test_objs += trmem.obj
!endif

# cflags
#########
extra_cppflags_axp = -DAS_ALPHA
extra_cppflags_mps = -DAS_MIPS
extra_cppflags_ppc = -DAS_PPC
extra_cpp_flags = $(extra_cppflags_$(target_cpu))
!ifeq release 0
extra_cpp_flags += -DTRMEM -DYYDEBUG=1 -DAS_DEBUG_DUMP
!endif

extra_c_flags = -fh

!ifeq release 0
extra_c_flags_386 = -of+
!endif

!ifdef __WATCOM_TOOLS__
extra_c_flags_aslexyy = -fh=pch02.pch
extra_c_flags_asilexyy = -fh=pch03.pch
extra_c_flags_preproc = -fh=$^:pch04.pch
extra_c_flags_ppexpr = -fh=$^:pch04.pch
extra_c_flags_ppmacro = -fh=$^:pch04.pch
extra_c_flags_ppmem = -fh=$^:pch04.pch
extra_c_flags_ppenv = -fh=$^:pch04.pch
extra_c_flags_trmemcvr = -fh=$^:pch05.pch
extra_c_flags_pathlist = -fh=$^:pch06.pch
!endif

!ifdef __WATCOM_TOOLS__
stand_pch_c_flags = -fh=stand.pch
!endif

# lflags
#########
libs = $(owl_lib) $(wres_lib)

# rcflags
##########

# splice options
##################
wsplice_opts_axp = -kAS_ALPHA
wsplice_opts_mps = -kAS_MIPS
wsplice_opts_ppc = -kAS_PPC
wsplice_opts     = $(wsplice_opts_$(target_cpu))

# include directory
####################

.c: $(as_dir)/$(target_cpu)/c;$(as_dir)/c;$(trmem_dir);$(cpp_c_dirs);$(watcom_dir)/c

inc_dirs = -I. -I"$(as_dir)/$(target_cpu)/h" -I"$(as_dir)/h" -I"$(owl_dir)/h" $(cpp_inc_dirs) -I"$(fe_misc_dir)/h" -I"$(trmem_dir)"

# explicit rules
#################

!ifdef test_inline_as

asinline.exe : $(asi_test_objs) $(asminline_lib) $(__MAKEFILES__)
    $(cl) $(clflags) $(asi_test_objs) $(asminline_lib) $(ldflags)

!endif

# systems where version resource must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

!include verrc.mif

all_as =
!ifndef no_asi_lib
all_as += asinline.lib
!endif
!ifndef no_standalone
all_as += $(name).exe
!endif

all : $(all_as) .symbolic

$(name).exe : msg.gh $(as_objs) $(libs) wresui.res $(version_res_exe_$(host_os)_$(host_cpu)) $(osildr) $(__MAKEFILES__)
    @%make echo_link
!ifndef __WATCOM_TOOLS__
    $(cl) $(clflags) $(as_objs) $(libs) $(ldflags)
!else
    $(linker) name $(lname) $(lflags) file {$(as_objs)} lib {$(libs)}
    @%make bind_osildr
!endif
    @%make bind_res_version_exe
    @%make bind_res_wresui

wresui.res : $(as_dir)/h/as.rc msg.gh $(__MAKEFILES__)
    @%make echo_rc
    $(rc_aui) $(cppflags) -D_STANDALONE_ $[@ -fo=$^@

asinline.lib : asi_msg.gh $(asi_objs) $(__MAKEFILES__)
    @%make echo_lib
!ifndef __WATCOM_TOOLS__
    $(blib) $(bld_libflags) $(asi_objs)
!else
    $(librarian) $(libflags) $(asi_objs)
!endif

msg.gh : $(as_dir)/h/as.msg $(__MAKEFILES__)
    @%make echo_cpp
    $(cpp) $(rc_aui_flags) $(cppflags) -D_STANDALONE_ -omsg.tmp $[@
    @%make echo_awk
    $(awk) -v base=AS_MSG_BASE -f $(build_dir)/makemsg.awk -v OUTFILE=$^. msg.tmp

asi_msg.gh : $(as_dir)/h/as.msg $(__MAKEFILES__)
    @%make echo_cpp
    $(cpp) $(rc_aui_flags) $(cppflags) -oasi_msg.tmp $[@
    @%make echo_awk
    $(awk) -v base=AS_MSG_BASE -f $(build_dir)/makemsg.awk -v OUTFILE=$^. asi_msg.tmp

$(yacc_in).y : $(as_dir)/y/$(yacc_src) $(as_dir)/y/yydriver.c $(__MAKEFILES__)
    @if not exist $(stand_subdir) mkdir $(stand_subdir)
    $(wsplice) $(wsplice_opts) -k_STANDALONE_ $[@ $(yacc_in).tmp
    $(sed) -e "s/ytab.h/asytab.h/g" $(yacc_in).tmp > $^@

$(asi_yacc_in).y : $(as_dir)/y/$(yacc_src) $(as_dir)/y/yydriver.c $(__MAKEFILES__)
    $(wsplice) $(wsplice_opts) $[@ $(asi_yacc_in).tmp
    $(sed) -e "s/ytab.h/asiytab.h/g" $(asi_yacc_in).tmp > $^@

yacc_deps = $(yacc_in).y $(as_dir)/y/yydriver.c

$(yacc_out).c : $(yacc_deps) $(__MAKEFILES__)
    @%make echo_yacc
    $(yacc) $(yacc_flags) $(yacc_deps) > $(nulldevice)

asi_yacc_deps = $(asi_yacc_in).y $(as_dir)/y/yydriver.c

$(asi_yacc_out).c : $(asi_yacc_deps) $(__MAKEFILES__)
    @%make echo_yacc
    $(yacc) $(asi_yacc_flags) $(asi_yacc_deps) > $(nulldevice)

$(lex_in).re : $(as_dir)/y/$(lex_src) $(__MAKEFILES__)
    @if not exist $(stand_subdir) mkdir $(stand_subdir)
    $(wsplice) $(wsplice_opts) -k_STANDALONE_ $[@ $(lex_in).tmp
    $(sed) -e "s/ytab.h/asytab.h/g" $(lex_in).tmp > $@

$(asi_lex_in).re : $(as_dir)/y/$(lex_src) $(__MAKEFILES__)
    $(wsplice) $(wsplice_opts) $[@ $(asi_lex_in).tmp
    $(sed) -e "s/ytab.h/asiytab.h/g" $(asi_lex_in).tmp > $@

$(lex_out).c : $(lex_in).re $(__MAKEFILES__)
    @%make echo_re2c
    $(re2c) $(lex_flags) $[@ > $@

$(asi_lex_out).c : $(asi_lex_in).re $(__MAKEFILES__)
    @%make echo_re2c
    $(re2c) $(lex_flags) $[@ > $@

.c{$(stand_subdir)}.obj: $(__MAKEFILES__) $($(proj_name)_autodepends)
    @if not exist $(stand_subdir) mkdir $(stand_subdir)
    @%make echo_cc
    $(cc) $(cflags) $(c_flags) $(cppflags) -D_STANDALONE_ $(stand_pch_c_flags) $(extra_c_flags_$[&) $(inc_path) $[@

echo_re2c : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo re2c $@
!endif
