/*
 *  i86.h       Defines the structs and unions used to handle the input and
 *              output registers for the Intel x86 and 386 interrupt interface
 *              routines.
 *
:include crwat.sp
 */
#ifndef _I86_H_INCLUDED
#define _I86_H_INCLUDED

:include readonly.sp

#ifndef _M_IX86
 #error i86.h is for use with Intel platforms
#endif

:include owrtlink.sp

:include cpluspro.sp

:include pshpackl.sp

#undef __FILLER
:segment DOS | QNX
#if defined(_M_I86) || defined(__WINDOWS_386__)
 #define __FILLER(a)
#else
:endsegment
 #define __FILLER(a) unsigned short a;
:segment DOS | QNX
#endif
:endsegment

:segment DOS | QNX
#if !defined(_M_I86) && !defined(__WINDOWS_386__)

:endsegment
/* dword registers */

struct DWORDREGS {
        unsigned int eax;
        unsigned int ebx;
        unsigned int ecx;
        unsigned int edx;
        unsigned int esi;
        unsigned int edi;
        unsigned int cflag;
};

:segment DOS | QNX
#endif

:endsegment
/* word registers */

struct WORDREGS {
        unsigned short ax;  __FILLER(_1)
        unsigned short bx;  __FILLER(_2)
        unsigned short cx;  __FILLER(_3)
        unsigned short dx;  __FILLER(_4)
        unsigned short si;  __FILLER(_5)
        unsigned short di;  __FILLER(_6)
:segment DOS | QNX
#ifdef __WINDOWS_386__
        unsigned short cflag;
#else
:endsegment
        unsigned int cflag;
:segment DOS | QNX
#endif
:endsegment
};

/* byte registers */

struct BYTEREGS {
        unsigned char al, ah;  __FILLER(_1)
        unsigned char bl, bh;  __FILLER(_2)
        unsigned char cl, ch;  __FILLER(_3)
        unsigned char dl, dh;  __FILLER(_4)
};

/* general purpose registers union - overlays the corresponding dword,
 * word, and byte registers.
 */

union REGS {
:segment DOS | QNX
#if defined(_M_I86) || defined(__WINDOWS_386__)
        struct WORDREGS  x;
#else
:endsegment
        struct DWORDREGS x;
:segment DOS | QNX
#endif
:endsegment
        struct WORDREGS  w;
        struct BYTEREGS  h;
};
#define _REGS REGS

/* segment registers */

struct SREGS {
        unsigned short es, cs, ss, ds;
:segment DOS | QNX
#ifndef _M_I86
:endsegment
        unsigned short fs, gs;
:segment DOS | QNX
#endif
:endsegment
};
#define _SREGS SREGS


/* intr structs */

struct REGPACKB {
        unsigned char al, ah;  __FILLER(_1)
        unsigned char bl, bh;  __FILLER(_2)
        unsigned char cl, ch;  __FILLER(_3)
        unsigned char dl, dh;  __FILLER(_4)
};

struct REGPACKW {
        unsigned short ax;  __FILLER(_1)
        unsigned short bx;  __FILLER(_2)
        unsigned short cx;  __FILLER(_3)
        unsigned short dx;  __FILLER(_4)
        unsigned short bp;  __FILLER(_5)
        unsigned short si;  __FILLER(_6)
        unsigned short di;  __FILLER(_7)
        unsigned short ds;
        unsigned short es;
:segment DOS | QNX
#if !defined(_M_I86) && !defined(__WINDOWS_386__)
:endsegment
        unsigned short fs;
        unsigned short gs;
:segment DOS | QNX
#endif
#ifdef __WINDOWS_386__
        unsigned short flags;
#else
:endsegment
        unsigned int flags;
:segment DOS | QNX
#endif
:endsegment
};

struct REGPACKX {
        unsigned int   eax, ebx, ecx, edx, ebp, esi, edi;
        unsigned short ds, es, fs, gs;
        unsigned int   flags;
};

union REGPACK {
        struct REGPACKB h;
        struct REGPACKW w;
:segment DOS | QNX
#if defined(_M_I86) || defined(__WINDOWS_386__)
        struct REGPACKW x;
#else
:endsegment
        struct REGPACKX x;
:segment DOS | QNX
#endif
:endsegment
};

/* input parm to an 'interrupt' function is union INTPACK */
/* e.g.  interrupt int10( union INTPACK r ) {}            */

struct INTPACKX {
        unsigned gs,fs,es,ds,edi,esi,ebp,esp,ebx,edx,ecx,eax,eip,cs,flags;
};
/*
   NOTE: The gs and fs fields will not be correct unless the compiler
         is invoked with at least the /3 switch.
*/
struct INTPACKW {
        unsigned short gs;  __FILLER(_1)
        unsigned short fs;  __FILLER(_2)
        unsigned short es;  __FILLER(_3)
        unsigned short ds;  __FILLER(_4)
        unsigned short di;  __FILLER(_5)
        unsigned short si;  __FILLER(_6)
        unsigned short bp;  __FILLER(_7)
        unsigned short sp;  __FILLER(_8)
        unsigned short bx;  __FILLER(_9)
        unsigned short dx;  __FILLER(_a)
        unsigned short cx;  __FILLER(_b)
        unsigned short ax;  __FILLER(_c)
        unsigned short ip;  __FILLER(_d)
        unsigned short cs;  __FILLER(_e)
        unsigned flags;
};
struct INTPACKB {
:segment DOS | QNX
#ifdef _M_I86
        unsigned /*gs*/:16,/*fs*/:16,
                 /*es*/:16,/*ds*/:16,
                 /*di*/:16,/*si*/:16,
                 /*bp*/:16,/*sp*/:16;
#else
:endsegment
        unsigned /*gs*/ :32,/*fs*/ :32,
                 /*es*/ :32,/*ds*/ :32,
                 /*edi*/:32,/*esi*/:32,
                 /*ebp*/:32,/*esp*/:32;
:segment DOS | QNX
#endif
:endsegment
        unsigned char bl, bh; __FILLER(_1)
        unsigned char dl, dh; __FILLER(_2)
        unsigned char cl, ch; __FILLER(_3)
        unsigned char al, ah; __FILLER(_4)
};
union  INTPACK {
        struct INTPACKB h;
        struct INTPACKW w;
:segment DOS | QNX
#ifdef _M_I86
        struct INTPACKW x;
#else
:endsegment
        struct INTPACKX x;
:segment DOS | QNX
#endif
:endsegment
};

/* bits defined for flags field defined in REGPACKW and INTPACKW */

enum {
    INTR_CF     = 0x0001,       /* carry */
    INTR_PF     = 0x0004,       /* parity */
    INTR_AF     = 0x0010,       /* auxiliary carry */
    INTR_ZF     = 0x0040,       /* zero */
    INTR_SF     = 0x0080,       /* sign */
    INTR_TF     = 0x0100,       /* trace */
    INTR_IF     = 0x0200,       /* interrupt */
    INTR_DF     = 0x0400,       /* direction */
    INTR_OF     = 0x0800        /* overflow */
};

_WCIRTLINK extern void _disable( void );
_WCIRTLINK extern void _enable( void );

#ifdef  __INLINE_FUNCTIONS__
 #pragma intrinsic(_disable,_enable)
#endif

:include delay.sp
:segment DOS | QNX
#if defined(_M_I86) || defined(__WINDOWS_386__)
_WCRTLINK extern int     int86( int, union REGS *, union REGS * );
_WCRTLINK extern int     int86x( int, union REGS *, union REGS *, struct SREGS * );
#else
:endsegment
_WCRTLINK extern int     int386( int, union REGS *, union REGS * );
_WCRTLINK extern int     int386x( int, union REGS *, union REGS *, struct SREGS * );
:segment DOS | QNX
#endif
:endsegment
_WCRTLINK extern void    intr( int, union REGPACK * );
_WCRTLINK extern void    nosound( void );
_WCRTLINK extern void    segread( struct SREGS * );
_WCRTLINK extern void    sound( unsigned __frequency );

/* macros to break 'far' pointers into segment and offset components */

#define _FP_OFF(__p) ((unsigned)(__p))

:segment DOS | QNX
#ifdef _M_I86
 #define _FP_SEG(__p) ((unsigned)((unsigned long)(void __far*)(__p) >> 16))
#else
:endsegment
 unsigned short _FP_SEG( const volatile void __far * );
 #pragma aux    _FP_SEG = __parm __caller [eax dx] __value [dx]
:segment DOS | QNX
#endif
:endsegment

/* make a far pointer from segment and offset */
#define _MK_FP(__s,__o) (((unsigned short)(__s)):>((void __near *)(__o)))

:: non-ANSI names
#define FP_OFF _FP_OFF
#define FP_SEG _FP_SEG
#define MK_FP  _MK_FP

:include poppack.sp

:include cplusepi.sp

#endif
