proj_name = wasm

!ifdef bootstrap
name = bwasm
!else
name = wasm
!endif

!ifndef wasm_autodepends
wasm_autodepends = .AUTODEPEND
!endif

additional_cleanup = *.u

wasm_trmem = 1

fpu_flags_dos_i86 = -fpc
fpu_flags_dos_386 = -fpc
fpu_flags_linux_386 = -fpc
fpu_flags_nt_386 = -fpc
fpu_flags_os2_386 = -fpc
fpu_flags_osi_386 = -fpc
fpu_flags_qnx_386 = -fpc

!include cproj.mif
!include defrule.mif
!include deftarg.mif
!include osi.mif

!include wres.mif
!include trmem.mif

inc_dirs  = -I. -I"../h" -I"$(womp_dir)/h" -I"$(fe_misc_dir)/h"

libs = $(wres_lib)

#cflags stuff
#########
extra_cpp_flags =-D_STANDALONE_
#extra_cpp_flags += -DUSE_TEXT_MSGS
!ifeq release 0
extra_cpp_flags += -DDEBUG_OUT
!endif

extra_c_flags_genmsomf = -DMSG_WOMP_BASE=200
extra_c_flags_fixup = -DMSG_WOMP_BASE=200
extra_c_flags_asmalloc = $(trmem_cover_cflags)
extra_c_flags_trmem = $(trmem_cflags)

#lflags stuff
#########

extra_link_res_qnx = usage.u

extra_l_flags = lib $(wres_lib)
extra_l_flags_qnx = option offset=16k, res=$(extra_link_res_qnx), stack=12k
extra_l_flags_dos_i86 = option stack=6k
extra_l_flags_dos_386 = option stack=12k
extra_l_flags_dos = $(extra_l_flags_dos_$(host_cpu))
extra_l_flags_linux = option stack=12k

.c : ../c;$(womp_dir)/c;$(trmem_dir);$(watcom_dir)/c

objs = $(extra_objs_$(host_os)_$(host_cpu)) &
    main.obj            &
    write.obj           &
    fatal.obj           &
    womputil.obj        &
    direct.obj          &
    posndir.obj         &
    asmeval.obj         &
    asmalloc.obj        &
    asmmsg.obj          &
    wasmmsg.obj         &
    macro.obj           &
    condasm.obj         &
    breakout.obj        &
    asmstruc.obj        &
    asmexpnd.obj        &
    mangle.obj          &
    for.obj             &
    objio.obj           &
    carve.obj           &
    genmsomf.obj        &
    objrec.obj          &
    queue.obj           &
    fixup.obj           &
    lifix.obj           &
    asmins.obj          &
    asmscan.obj         &
    asmline.obj         &
    asmsym.obj          &
    tbyte.obj           &
    asmlabel.obj        &
    asmfixup.obj        &
    asmmatch.obj        &
    asmdata.obj         &
    asmjump.obj         &
    autodept.obj        &
    dostimet.obj        &
    queues.obj          &
    pathlist.obj

objs += $(trmem_objs)

depend_objs = $(extra_link_res_$(host_os)) asmops.gh asmopsd.gh usage.gh wmpmsg.gh wasmmsg.gh msg.gh

# systems where version resources must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

!include verrc.mif

#explicit rules
######

$(name).exe : $(depend_objs) $(objs) wresui.res $(version_res_exe_$(host_os)_$(host_cpu)) $(osildr) $(__MAKEFILES__)
!ifndef __WATCOM_TOOLS__
    @%make echo_link
    $(cl) $(clflags) $(objs) $(libs) $(ldflags)
!else
    @%write  $^&.lnk $(lflags)
    @%append $^&.lnk file { $(objs) }
    @%make echo_link
    $(linker) name $(lname) @$^&.lnk
    @%make bind_osildr
!endif
    @%make bind_res_version_exe
    @%make bind_res_wresui

###################################################################
# resource stuff

wresui.res : ../h/$(proj_name).rc usage.gh usagej.gh msg.gh wasmmsg.gh wmpmsg.gh $(__MAKEFILES__)
    @%make echo_rc
    $(rc_aui) -D_STANDALONE_ $[@ -fo=$@

msg.gh : ../h/asmshare.msg $(__MAKEFILES__)
    @%make echo_awk
    $(awk) -v base=MSG_SHARE_BASE -f $(build_dir)/makemsg.awk -v OUTFILE=$^. $[@

wasmmsg.gh : ../h/wasm.msg $(__MAKEFILES__)
    @%make echo_awk
    $(awk) -v base=MSG_WASM_BASE -f $(build_dir)/makemsg.awk -v OUTFILE=$^. $[@

wmpmsg.gh : ../h/womp.msg $(__MAKEFILES__)
    @%make echo_awk
    $(awk) -v base=MSG_WOMP_BASE -f $(build_dir)/makemsg.awk -v OUTFILE=$^. $[@

end.tmp :
    $(noecho)%write $@ "."

usage.gh : ../h/options.gml end.tmp $(__MAKEFILES__)
    @%make echo_optencod
    $(noecho)optencod -q $(optencod_opt_$(host_os)) $[@ . . $^&.tmp any
    $(wsplice) -t8 -f "pick((MSG_USAGE_BASE+%$#%+), %s, \"\")" $^&.tmp end.tmp $@

usagej.gh : ../h/options.gml end.tmp $(__MAKEFILES__)
    @%make echo_optencod
    $(noecho)optencod -l 1 -q $[@ . . $^&.tmp any
    $(wsplice) -t8 -f "pick((MSG_USAGE_BASE+%$#%+), \"\", %s)" $^&.tmp end.tmp $@

usage.u : ../h/options.gml $(__MAKEFILES__)
    @%make echo_optencod
    $(noecho)optencod -q -u $@ $[@ . . . any

###################################################################

./mkopcod1.exe: ../mkopcod1.c ../mkopcode.h $(__MAKEFILES__)
    @%make echo_bldcl
    $(bld_cl) $[@ -D_STANDALONE_ -I. -I"../h" $(bld_clflags) $(bld_ldflags)

asmops.gh: ./mkopcod1.exe ../fullops.tok ../inlnops.tok
    @%make echo_execute
    $(noecho)$< $@

./mkopcode.exe: ../mkopcode.c ../mkopcode.h asmops.gh $(__MAKEFILES__)
    @%make echo_bldcl
    $(bld_cl) $[@ -D_STANDALONE_ -I. -I"../h" $(bld_clflags) $(bld_ldflags)

asmopsd.gh: ./mkopcode.exe ../fullops.tok ../inlnops.tok
    @%make echo_execute
    $(noecho)$< $@

echo_optencod : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo optencod $@
!endif
