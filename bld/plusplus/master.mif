proj_name = plusplus

plusplus_autodepends = .autodepend

# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifdef bootstrap
exename     = bwpp
dllname     = bwppd$(target_cpu)
!else
exename     = wpp
dllname     = wppd$(target_cpu)
!endif
!ifneq target_cpu i86
exename     +=$(target_cpu)
!endif

# Important! The C++ compiler modifies string literals
#suppress_zc = 1

# Extra files to delete on clean
additional_cleanup = *.u *.int *.gc y.out ytab.* *.mbr $(dll_subdir)/*.mbr

!include cproj.mif
!include defrule.mif
!include dllrule.mif
!include deftarg.mif
!include osi.mif

!include $(cg_dir)/mif/fe.mif
!include $(as_dir)/client.mif
!include $(wasm_dir)/client.mif

!include trmem.mif

!include ../../ppobjs.mif

pre_obj_deps = &
    errmsgs1.gh &
    ic_mask.gh &
    weights.gh &
    keywords.gh &
    yylex.gh &
    cmdlnprs.gh &
    $(asminline_deps) &
    code$(target_cpu).gh

# international data files
pre_obj_deps += wpp$(target_cpu)01.int

inc_dirs = -I. -I.. -I"../../h"
!ifeq plusplus_trmem 1
inc_dirs += -I"$(trmem_dir)"
!endif
inc_dirs += $(cg_inc_dirs)
inc_dirs += $(asminline_inc_dirs)
inc_dirs += $(dwarfw_inc_dirs)
inc_dirs += -I"$(cc_dir)/h"
inc_dirs += -I"$(comp_cfg_dir)/h"
inc_dirs += -I"$(fe_misc_dir)/h"
inc_dirs += -I"$(brinfo_dir)/h"

extra_cpp_flags =
!ifndef plusplus_dll
extra_cpp_flags += -DIDE_PGM
!endif
!ifeq dll_cg 1
extra_cpp_flags += -D_CGDLL
!endif

extra_cpp_flags_osi   = -D__OS2__

!ifdef plusplus_dll
extra_cpp_flags_dos   = -DCAUSEWAY
!endif

extra_c_flags =
!ifeq release 0
extra_c_flags += -db
extra_c_flags_axp = -si
!endif

extra_c_flags_carve    = $(incl_file_opts)carvecpp.h
extra_c_flags_cmdlnprs = $(incl_file_opts)fesupp.h
!ifeq release 0
extra_c_flags_dbgzap   = $(incl_file_opts)fesupp.h
!endif
extra_c_flags_floatsup = $(cfloat_inc_dirs)
extra_c_flags_idedrv   = -DSTATIC_LINKAGE
extra_c_flags_initfini = -DSPLIT_REQD $(incl_file_opts)fesupp.h
extra_c_flags_intlload = $(incl_file_opts)fesupp.h
extra_c_flags_pstk     = $(incl_file_opts)fesupp.h
extra_c_flags_ringcarv = $(incl_file_opts)fesupp.h
extra_c_flags_ringfns  = $(incl_file_opts)fesupp.h
extra_c_flags_vbuf     = $(incl_file_opts)fesupp.h
extra_c_flags_vstk     = $(incl_file_opts)fesupp.h
!ifdef plusplus_dll
extra_c_flags_ideentry = -Dwpp_dll
extra_c_flags_maindrv  = -Dwpp_drv -DDLL_NAME=$(dllname)
!endif

!ifndef bootstrap
!ifneq host_os linux
# Using -os generates ENTER/LEAVE and Linux is too brain damaged
# to handle ENTER instructions properly. Since GCC doesn't generate
# ENTER, this is supposed to be a "feature".
extra_c_flags_cmdlnany = -os
!endif
extra_c_flags_cscan_386 = -4r
extra_c_flags_cscan    = $(extra_c_flags_cscan_$(host_cpu))
!ifeq release 1
extra_c_flags_pcheader_386 = -oi
extra_c_flags_pcheader = $(extra_c_flags_pcheader_$(host_cpu))
!endif
extra_c_flags_srcfile_386 = -4r
extra_c_flags_srcfile  = $(extra_c_flags_srcfile_$(host_cpu))
!endif
!ifeq plusplus_trmem 1
extra_c_flags_memmgr_axp = -DTRACKER
extra_c_flags_memmgr_ppc = -DTRACKER
extra_c_flags_memmgr_386 = -DTRACKER
!ifndef bootstrap
extra_c_flags_memmgr_386 += -of+
!endif
extra_c_flags_memmgr   = $(extra_c_flags_memmgr_$(host_cpu))
!endif

#
# wlink .EXE options
#

extra_link_res_qnx = usage.u

extra_l_flags_osi = OPTION stack=64k
extra_l_flags_dos = OPTION stack=64k
extra_l_flags_os2 = OPTION stack=128k
extra_l_flags_qnx = OPTION stack=64k, offset=72k, priv=3, resource=$(extra_link_res_qnx)

#
# wlink .DLL options
#
extra_l_flags_dll     = option implib $($(proj_name)_dllbase_$(host_os)_$(host_cpu))

extra_l_flags_dll_nt  = initinstance terminstance op modname='$(dllname).dll'
extra_l_flags_dll_os2 = initinstance terminstance op modname='$(dllname)', manyautodata

# source search path

.c: ../../c;$(asminline_c);$(watcom_dir)/c;$(fe_misc_dir)/c;$(brinfo_dir)/c;$(trmem_dir)

#
# External libraries
#
libs = $(asminline_lib) $(cg_libs)

#
# Common dependencies
#

depends_exe = $(pre_obj_deps)
depends_dll = $(pre_obj_deps)
depends_drv =

# systems where version resources must be added to .DLL
version_res_dll_nt_386 = version.res
version_res_dll_nt_x64 = version.res

# systems where version resources must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

verrc_dll = $(dllname)
verrc_exe = $(exename)
!include verrc.mif

#
# create compiler
#

!ifdef plusplus_dll

$(exename).exe : $(depends_drv) $(dllname).dll $(comp_objs_drv) $(version_res_exe_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
!ifndef __WATCOM_TOOLS__
    @%make echo_link
    $(cl) $(clflags_gen) $(comp_objs_drv) $(dllname).lib $(ldflags_gen)
!else
    @%write drv.lnk $(lflags)
    @for %i in ($(comp_objs_drv)) do @%append drv.lnk file %i
    @%append drv.lnk lib $(dllname).lib
!ifeq host_os dos
    @%append drv.lnk lib cwdll.lib
!endif
    @%make echo_link
    $(linker) name $@ @drv.lnk
!endif
    @%make bind_res_version_exe

!else

$(exename).exe : $(depends_exe) $(comp_objs_exe) $(libs) $(version_res_exe_$(host_os)_$(host_cpu)) $(osildr) $(__MAKEFILES__)
!ifndef __WATCOM_TOOLS__
    @%make echo_link
    $(cl) $(clflags) $(comp_objs_exe) $(libs) $(ldflags)
!else
    @%write exe.lnk $(lflags)
    @for %i in ($(comp_objs_exe)) do @%append exe.lnk file %i
    @for %i in ($(libs)) do @%append exe.lnk library %i
    @%make echo_link
    $(linker) name $(lname) @exe.lnk
    @%make bind_osildr
!endif
    @%make bind_res_version_exe

!endif

$(dllname).dll : $(depends_dll) $(comp_objs_dll) $(libs) $(version_res_dll_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
!ifndef __WATCOM_TOOLS__
    @%make echo_link
    $(cl) $(clflags_dll) $(comp_objs_dll) $(libs) $(ldflags_dll)
!else
    @%write dll.lnk $(lflags_dll)
    @for %i in ($(comp_objs_dll)) do @%append dll.lnk file %i
    @for %i in ($(libs)) do @%append dll.lnk library %i
    @%make echo_link
    $(linker) name $@ @dll.lnk
!endif
    @%make bind_res_version_dll

#
# miscellaneous build rules
#
./intlbin.exe: $(fe_misc_dir)/c/intlbin.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I"$(fe_misc_dir)/h" $(bld_ldflags)

wpp$(target_cpu)01.int : ./intlbin.exe errors01.int usage01.int
    $[@ wpp$(target_cpu)

errmsgs1.gh errmsgs2.gh errlevel.gh errors01.int : ../../gml/messages.gml
    @%make echo_msgencod
    $(noecho)msgencod -s -i -q ../../gml/messages.gml errmsgs1.gh errmsgs2.gh errlevel.gh

keywords.gh weights.gh : ../../hash/plusplus.key ../../hash/pc.key
    @%make echo_findhash
    $(noecho)findhash -q -e ",-1" ../../hash/plusplus.key ../../hash/pc.key

./umktable.exe: ../../c/umktable.c xlat.gh
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I. -I"../../h" $(bld_ldflags)

yylex.gh : ./umktable.exe
    @%make echo_execute
    $(noecho)$[@ $@

./mktrans.exe: ../../c/mktrans.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) $(bld_ldflags)

xlat.gh : ./mktrans.exe ../../h/ctokens.h keywords.gh ytab.h
    @%make echo_execute
    $(noecho)$[@ $]@ $@

yacc_options = -d -db -dd -df -dt -du -de
# The -dp and -ds switches are v. useful when debugging parser but gen large file!
#yacc_options = -d -db -dd -df -dp -ds -dt -du -de

ytab.c ytab.h : ../../y/plusplus.y ../../c/yydriver.c
    @%make echo_yacc
    $(yacc) $(yacc_options) $[@ $]@ >y.out
# comment out the next line during testing of grammar changes
    diff y.out ../../y/plusplus.chk

# optencod options and targets for various hosts
optencod_opt_qnx = -u $(extra_link_res_qnx)
optencod_targ_bsd   = bsd
optencod_targ_osx   = osx
optencod_targ_qnx   = qnx
optencod_targ_linux = linux
optencod_targ_haiku = haiku
!ifeq release 0
optencod_targ_dbg = dbg
!endif

cmdlnprs.gh cmdlnprs.gc cmdlnusg.gh usage01.int : ../../gml/options.gml
    @%make echo_optencod
    $(noecho)optencod -i -n -q $(optencod_opt_$(host_os)) $]@ cmdlnprs.gh cmdlnprs.gc cmdlnusg.gh $(target_cpu) $(optencod_targ_dbg) $(optencod_targ_$(host_os))

./icmask.exe: ../../c/icmask.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I"../../h" $(bld_ldflags)

ic_mask.gh : ./icmask.exe ../../h/ic.h ../../c/dwarf.c ../../c/cgbkcgrf.c ../../c/cgio.c ../../c/brmwrite.c
    @%make echo_execute
    $(noecho)*$[@ ../../h/ic.h ../../c/dwarf.c ../../c/cgbkcgrf.c ../../c/cgio.c ../../c/brmwrite.c

./mkopcod1.exe: $(wasm_dir)/mkopcod1.c $(wasm_dir)/mkopcode.h
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I. -I"$(wasm_dir)/h" $(bld_ldflags)

asmops.gh: ./mkopcod1.exe $(wasm_dir)/inlnops.tok
    @%make echo_execute
    $(noecho)$[@ $(wasm_dir)/inlnops.tok $@

./mkopcode.exe: $(wasm_dir)/mkopcode.c $(wasm_dir)/mkopcode.h asmops.gh
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) -I. -I"$(wasm_dir)/h" $(bld_ldflags)

asmopsd.gh: ./mkopcode.exe $(wasm_dir)/inlnops.tok asmops.gh
    @%make echo_execute
    $(noecho)$[@ $(wasm_dir)/inlnops.tok $@

!ifeq target_cpu axp

codeaxp.gh :
    echo // Dummy file > $@

!else ifeq target_cpu ppc

codeppc.gh :
    echo // Dummy file > $@

!else ifeq target_cpu mps

codemps.gh :
    echo // Dummy file > $@

!else  # Intel i86 or 386

code$(target_cpu).gh : ./mkcode.exe xcode$(target_cpu).tmp
    @%make echo_execute
    $(noecho)$[@ $]@ $@
!endif

target_as_axp = *bwasmaxp -zq -w8
target_as_i86 = *bwasm -zq -w8
target_as_386 = *bwasm -zq -3 -w8
target_as_ppc = *bwasmppc -zq -w8

xcode$(target_cpu).tmp: $(cc_dir)/a/code$(target_cpu).asm
    @%make echo_aslink
    $(noecho)$(target_as_$(target_cpu)) -fo=.obj -I"$(watcom_dir)/h" $[@
    $(noecho)*bwlink format dos com op quiet, nodefault file code$(target_cpu).obj name $@ disable 1023,1080

bld_extra_incs = -I. -I"$(fe_misc_dir)/h" -I"../../h" -I"$(wasm_dir)/h"

./mkcode.exe: $(cc_dir)/a/mkcode.c
    @%make echo_bldcl
    $(bld_cl) $[@ $(bld_clflags) $(bld_ldflags)

echo_aslink : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo bld_as $[&.obj
    @echo bld_link $@
!endif

echo_optencod : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo optencod $@
!endif

echo_msgencod : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo msgencod $@
!endif

echo_findhash : .PROCEDURE .EXPLICIT
!ifeq verbose 0
    @echo findhash $@
!endif
